@page "/admin/products"
@page "/admin"
@using SportsStore.Models.Mappers

@inherits OwningComponentBase<SportsStore.Repository.IStoreRepository>

<table class="table table-sm table-striped table-bordered">
    <thead>
    <tr>
        <th>ID</th><th>Name</th>
        <th>Category</th><th>Price</th><td/>
    </tr>
    </thead>
    <tbody>
    @if (ProductData?.Count() > 0)
    {
        @foreach (Product p in ProductData)
        {
            <tr>
                <td>@p.ProductId</td>
                <td>@p.Name</td>
                <td>@p.Category</td>
                <td>@p.Price.ToString("c")</td>
                <td>
                    <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(p.ProductId)">
                        Details
                    </NavLink>
                    <NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(p.ProductId)">
                        Edit
                    </NavLink>
					<button class="btn btn-danger btn-sm" @onclick="@(e => DeleteProduct(p))">
						Delete
					</button>
                </td>
            </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="5" class="text-center">No Products</td>
        </tr>
    }
    </tbody>
</table>
<NavLink class="btn btn-primary" href="/admin/products/create">Create</NavLink>

@code
{
    public SportsStore.Repository.IStoreRepository Repository => Service;

    public IEnumerable<Product> ProductData { get; set; }

    protected override void OnInitialized()
    {
        UpdateData();
    }

    public void UpdateData()
    {
        ProductData = Repository.Products.Select(p => Mapper.MapProduct(p));
    }

	public void DeleteProduct(Product p)
	{
		Repository.DeleteProduct(Mapper.MapProduct(p));
		UpdateData();
	}

    public string GetDetailsUrl(long id) => $"/admin/products/details/{id}";

    public string GetEditUrl(long id) => $"/admin/products/edit/{id}";
}
